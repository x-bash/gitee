# shellcheck shell=sh
# shellcheck disable=SC2039

xrc http/v0 param/v0 json/v0 str/v0

############################
# Section 1: Instantiation & Utilities
# Section 2: Dict & Path
# Section 3: Header
# Section 4: QueryString & Body
# Section 5: Request & Response
# Section 6: CRUD -- post get put delete
############################

############################
# Section 1: Token & Config management
############################

# shellcheck disable=SC2120
gt_token() {
    local O="${O:-GITEE_DEFAULT}"
    if [ $# -eq 0 ]; then
        param_default get "gitee_$O" "token"
    else
        param_default put "gitee_$O" "token" "$@"
    fi
    if [ -n "$1" ]; then
        # setter
        local token="$1"
        O="_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}"
        http_qs put access_token "$token"
        http_body put access_token "$token"
    fi
}

# Current
gt_current() {
    local O="${O:-GITEE_DEFAULT}"
    local op="$1"
    shift
    case "$op" in
    repo)
        param_default get "gitee_$O" "repo" "$@"
        ;;
    owner)
        case "$1" in
        type)
            shift
            if [ -n "$1" ]; then
                # Set owner type
                param_default put "gitee_$O" owner_type "$1"
                return
            fi

            local data
            data="$(param_default get "gitee_$O" owner_type "$1")"

            if [ -z "$data" ]; then
                owner="$(gt_current owner)"
                if [ -z "$owner" ]; then
                    echo "Owner is empty. While owner not set." >&2
                    return 1
                fi

                data=$(gt_owner_type_query "$owner")
                [ -z "$data" ] && return 1

                param_default put "gitee_$O" owner_type "$data"
            fi
            printf "%s" "$data"
            ;;
        *)
            if [ -n "$1" ]; then
                param_default put "gitee_$O" owner "$1"
                param_default dump "gitee_$O" owner_type
                # gt_current owner type || echo "Fetch owner type wrong. Please manually set owner-type using 'gt_current owner type <owner_type>'." >&2
                return 0
            fi

            # get owner type
            local owner
            if owner="$(param_default get "gitee_$O" owner)"; then
                echo "$owner"
                return 0
            fi

            if [ -z "$(gt_token)" ]; then
                echo "token:$(gt_token)"
                return 0
            fi
            # data="$(gt_user_info | jq -r .login)"
            data="$(gt_user info | json_query .login)"
            [ -z "$data" ] && return 1
            param_default get "gitee_$O" owner "$data"
            echo "$data"
            ;;
        esac
        ;;
    *)
        echo "Provide current query type repo|owner"
        ;;
    esac
}

gt_config() {
    local O="${O:-GITEE_DEFAULT}"
    local op="$1"
    shift
    local path="${1:-$HOME/.x-cmd.com/config/x-bash/app.gitee.config/$O}"
    case "$op" in
    which)
        echo "$HOME/.x-cmd.com/config/x-bash/app.gitee.config/$O"
        ;;
    save)
        mkdir -p "$(dirname "$path")"
        param_default dump "gitee_$O" >"$path"
        echo "Config $O saved in path: $path" >&2
        ;;
    load)
    if [ -s "$path" ]; then
        param_default load "gitee_$O" "$path"
        echo "Config $O load from path: $path" >&2
        token="$(param_default get "gitee_$O" token)"
        if [ -n "$token" ] ; then
            gt_token "$token"
        fi
    fi
        ;;
    *)
        echo "Provide config operation type which|save|load"
        ;;
    esac
}

############################
# Section 2: Wrapping std/http module with object naming changing
############################
gt_resp() {
    local O="_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}"
    local op=$1
    shift
    case "$op" in
    header | body)
        http_resp "$op" "$@"
        ;;
    *)
        echo "Provide type header or body"
        ;;
    esac
}

gt_request() {
    local O="_x_cmd_x_bash_gitee_${O:-GITEE_DEFAULT}"
    local op=$1
    shift
    case "$op" in
    get)
        case "$1" in
        multi)
            shift
            local i=1 total_page=100000
            for ((i = 1; i <= total_page; i++)); do
                local O=""
                $O gt_request get "$@" page="$i" per_page=100
                total_page="$(gt_resp header "total_page")"
            done
            ;;
        *)
            http_get "$@"
            ;;
        esac
        ;;
    post)
        case "$1" in
        json | form | text | bin)
            local dataType=$1
            shift
            http_post "$dataType" "$@"
            ;;
        *)
            http_post "$@"
            ;;
        esac
        ;;
    put)
        case "$1" in
        json | form | text | bin)
            local dataType=$1
            shift
            http_put "$dataType" "$@"
            ;;
        *)
            http_put "$@"
            ;;
        esac
        ;;
    patch)
        http_patch json "$@"
        ;;
    delete)
        http_delete "$@"
        ;;
    *)
        echo "Provide request type"
        ;;
    esac
}

############################
# Section 3: Parameter Utilities
############################
gt_param_normalize_repo() {
    case "$1" in
    */*)
        printf "%s" "$1"
        ;;
    "")
        local _owner
        local _repo
        _owner="$(gt_current owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner NOT set.\n" >&2
            return 1
        fi

        _repo="$(gt_current_repo)"
        if [ -z "$_repo" ]; then
            printf "No repo provided. Default repo NOT set.\n" >&2
            return 1
        fi

        printf "%s/%s" "$_owner" "$_repo"
        ;;
    *)
        local _owner
        _owner="$(gt_current owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        printf "%s" "$_owner/$1"
        ;;
    esac
}

### Repo #1

gt_parse_owner_repo() {
    local O="${O:-GITEE_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(gt_current repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(gt_current owner)"
    fi
}

############################
# Section 4: Info & Org Creation
############################
# TODO: better solution?
gt_owner_type_query() {
    local owner="${1:?Provide owner name}"

    gt_org info "$owner" 1>/dev/null 2>&1 && printf "org" && return 0
    gt_enterprise info "$owner" 1>/dev/null 2>&1 && printf "enterprise" && return 0
    gt_user "$owner" 1>/dev/null 2>&1 && printf "user" && return 0

    return 1
}

gt_user() {
    local O="${O:-GITEE_DEFAULT}"
    op="$1"
    shift
    case "$op" in
    url)
        param <<A
        default gitee_$O
        --name    "users name" =~    [一-龥_a-zA-Z0-9]+
A
        gt_request get "/v5/users/$name" | json_query .html_url
        ;;
    keys)
        case "$1" in
        create)
            shift
            param <<A
        default gitee_$O
        #1  "users email" =~    \w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*
A
            ssh-keygen -t rsa -C "$1"
            ;;

        add)
            param <<A
        default gitee_$O
        --key=1  "Provide ssh-key" =~    [a-zA-Z0-9]+
        --title=20 "Provide ssh-key title" =~  [-一-龥_a-zA-Z0-9]+
A
            gt_request post json "/v5/user/keys" key title
            ;;

        delete)
            param <<A
        default gitee_$O
        --id  "Provide ssh-key id" =~    [a-zA-Z0-9]+
A
            gt_request delete "/v5/user/keys/$id"
            ;;

        list | *)
            param <<A
        default gitee_$O
        --page=1  "" =~    [0-9]*
        --per_page=20 "" =~ [0-9]*
A
            gt_request get "/v5/user/keys"
            ;;
        esac
        ;;
    *)
        gt_request get "/v5/user"
        ;;
    esac
}

#TODO POST repo gt_enterprise repo create  --owner "mycw_yx" --has_issues true
gt_enterprise() {
    local op="$1"
    shift
    case "$op" in
    info)
        gt_request get "/v5/enterprises/${1:?Provide enterprise}"
        ;;
    repo)
        local repoOp="$1"
        shift
        case "$repoOp" in
        create)
            param <<A
        --owner   "enterprise name"  =~    [一-龥_a-zA-Z0-9]+
        --has_issues=true  ""   =     true false
        --has_wiki=true    ""   =     true false
        --access=private   ""   =     public private innerSource
        --outsourced=false ""   =     true false
        ...     "repo list to create" =~     [A-Za-z0-9\n]+
A
            local private
            # shellcheck disable=SC2034
            case "$access" in
            public) private=0 ;;
            private) private=1 ;;
            innerSource) private=2 ;;
            esac

            # TODO
            local name
            for name in "$@"; do
                gt_request post json "/v5/enterprises/$owner/repos" name has_issues has_wiki private
            done
            return 0
            ;;

        list)
            param <<A
        --owner   "enterprise name"  =~    [一-龥_a-zA-Z0-9]+
        --type=all      "repo type"                 = all public internal private
        --direct=true   ""                          = true false
A

            # gt_get_multi "/v5/enterprises/$owner/repos" type=all | jq -r ".[] | .full_name"
            gt_request get multi "/v5/enterprises/$owner/repos" type="$type" | json_query .[0].full_name
            ;;
        *)
            echo "What do you need to do create|list"
            ;;
        esac
        ;;

    new)
        local owner="${1:?Provide enterprise name}"
        local instance_name="${2:-$owner}"
        eval "
        ${instance_name}_info(){ gt_enterprise info $owner; }
        ${instance_name}_repo_create(){ gt_enterprise repo create --owner $owner \"\$@\"; }
        ${instance_name}_repo_list(){ gt_enterprise repo list  --owner $owner \"\$@\"; }
    "
        ;;
    *)
        echo
        "What do you need to do info|repo"
        ;;
    esac
}

#TODO
gt_org() {
    local op="$1"
    shift
    case $op in
    info)
        gt_request get "/v5/orgs/${1:?Provide organization}"
        ;;
    create)
        param <<A
        ... "organization name" =~    [一-龥_a-zA-Z0-9]+
A
        local org
        for org in "$@"; do
            gt_request post json "/v5/users/organization" name="$org" org="$org"
        done
        ;;
    repo)
        case $1 in
        list)
            param <<A
        #1 "Provide organization"        =~    [-一-龥_a-zA-Z0-9]+
        --type=all          "repo type"     = all public privates
A
            local owner="$0"
            gt_request get multi "/v5/orgs/$owner/repos" type="$type" | json_query .full_name
            ;;

        create)
            param <<A
        default gitee_$O
        --path=""               "provide path"      =~    [一-龥_a-zA-Z0-9]+
        --description=""        "repo description"  =~    [一-龥_a-zA-Z0-9]+
        --homepage=""           "repo home page"    =~    [一-龥_a-zA-Z0-9]+
        --has_issues=true       ""                  = true false
        --has_wiki=true         ""                  = true false
        --can_comment=true      ""                  = true false
        --access=private        ""                  = public private innerSource
        --auto_init=false       ""                  = true false
        --gitignore_template="" ""                  =~    [一-龥_a-zA-Z0-9]+
        --license_template=""   ""                  =~    [一-龥_a-zA-Z0-9]+
        ...                     "repo list to create"  =~    [一-龥_a-zA-Z0-9]+
A

            local public
            case "$access" in
            private) public=0 ;;
            public) public=1 ;;
            innerSource) public=2 ;;
            esac

            local name owner
            for name in "$@"; do
                name="$(gt_param_normalize_repo "$name")"
                owner="$(echo "$name" | cut -d / -f 1)"
                name="$(echo "$name" | cut -d / -f 2)"

                local resp
                {
                    gt_request post json "/v5/orgs/$owner/repos" \
                        name path description homepage has_issues has_wiki public can_comment auto_init gitignore_template license_template
                    code=$?
                    if [ $code -ne 0 ]; then
                        echo "Creating repo failure: $name. Code is $code. " >&2
                        # gt_resp_header "" >&2
                        return $code
                    fi
                } | json_query .full_name
            done
            ;;
        esac
        ;;
    new)
        local owner="${1:?Provide organization name}"
        local instance_name="${2:-$owner}"
        eval "
        ${instance_name}_info(){ gt_org info $owner; }
        ${instance_name}_repo_create(){ gt_org repo create --owner $owner \"\$@\"; }
        ${instance_name}_repo_list(){ gt_org repo list --owner $owner \"\$@\"; }
    "
        ;;
    esac
}

############################
# Section 5: List Repos
############################
gt_repo() {
    local op="$1"
    shift
    case "$op" in
    list)
        param <<A
        #1  "Provide owner"
A

        local owner
        local owner_type
        owner="$0"
        if [ -z "$owner" ]; then
            gt_user_repo_list "$@"
        else
            owner_type="$(gt_owner_type_query "$owner")"
        fi

        if [ -n "$owner_type" ] && [ -n "$owner" ]; then
            "gt_${owner_type}_repo_list" "$@"
        else
            printf "Please provide owner and owner_type\n" >&2
            param_help.show
        fi
        ;;
    destroy)
        param <<A
        ... "Provide repo list"      =~    [一-龥_a-zA-Z0-9]+
A

        local owner_repo
        local i
        for i in "$@"; do
            owner_repo="$(gt_param_normalize_repo "$1")"

            echo "Deleting repo: $owner_repo" >&2
            gt_request delete "/v5/repos/$owner_repo" >/dev/null ||
                echo "Code is $?. Deleting repo failure: $1. Probably because it desn't exists." >&2
        done
        ;;
    create)
        local O="${O:-GITEE_DEFAULT}"

        param <<A
        default gitee_$O
        --has_issues=true  "Provide issue"      = true false
        --has_wiki=true    "Provide wiki"       = true false
        --access=private   "Provide access"     = public private innerSource
        ...                     "repo list to create"  =~    [一-龥_a-zA-Z0-9]+
A

        local private
        case "$access" in
        public) private=false ;;
        private) private=true ;;
        esac

        if [ "$#" -eq 0 ]; then
            param_help.show
            return 1
        fi

        local name
        for name in "$@"; do
            {
                gt_request post json "/v5/user/repos" name has_issues has_wiki private 2>/dev/null
                code=$?
                if [ $code -ne 0 ]; then
                    echo "Creating repo failure: $name. Code is $code. " >&2
                    # gt_resp_header "" >&2
                    return $code
                fi
            } | json_query .full_name
        done
        ;;
    fork)
        param <<A
        --repo              "Repo name"              =~    [一-龥_a-zA-Z0-9]+
        --organization=""   "Provide organization"   =~    [一-龥_a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$repo")"
        gt_request post json "https://gitee.com/api/v5/repos/${owner_repo}/forks" organization
        ;;
    info)
        param <<A
        #1      "Provide repo"  =~    [一-龥_a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$1")"

        gt_request get "/v5/repos/${owner_repo}"
        ;;
    new)
        local owner repo="${1:?Provide enterprise name}"
        gt_parse_owner_repo
        local instance_name="${2:-$repo}"

        eval "
        ${instance_name}_member_list(){ gt_repo_member_list \"\$@\"; }
        ${instance_name}_member_add(){ gt_repo_member_add \"\$@\"; }
        ${instance_name}_member_remove(){ gt_repo_member_remove \"\$@\"; }
    "
        ;;
    esac
}
# https://gitee.com/api/v5/swagger#/getV5UserRepos
gt_user_repo_list() {
    param <<A
        --visibility=all    ""      = public private all
        --affiliation=owner ""      = owner collaborator organization_member enterprise_member admin
        --sort=created      ""      = created updated pushed full_name
        --direction=desc  ""      = asc desc
A
    gt_request get multi "/v5/user/repos" visibility= affiliation sort direction
}

############################
# Section 6: Repo Path & Clone
############################
gt_repo_url() {
    local op="$1"
    local repo
    case "$op" in
    http)
        shift
        for repo in "$@"; do
            printf "https://gitee.com/%s.git\n" "$(gt_param_normalize_repo "$repo")"
        done
        ;;
    ssh)
        shift
        for repo in "$@"; do
            printf "git@gitee.com:%s.git\n" "$(gt_param_normalize_repo "$repo")"
        done
        ;;
    *)
        gt_repo_url ssh "$@"
        ;;
    esac
}

gt_repo_clone() {
    local op="$1"
    local repo
    case "$op" in
    https)
        shift
        git clone "$(gt_repo_url http "$@")"
        ;;
    ssh)
        shift
        git clone "$(gt_repo_url ssh "$@")"
        ;;
    *)
        gt_repo_clone ssh "$@" && return 0
        gt_repo_clone https "$@" && return 0
        return $?
        ;;
    esac
}

############################
# Section 7: Repo - Deletion & Info & Creation
############################

# ORGANIZATION NAME
# shellcheck disable=SC2154,SC2034

############################
# Section 8: Repo Member
############################
# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoCollaborators
gt_repo_member() {
    local op="$1"
    shift
    case "$op" in
    list)
        param_example \
            "list all members, using argument" \
            "gt_repo_member_list x-bash/std" \
            "list all members, using naming argument" \
            "gt_repo_member_list --repo x-bash/std"

        param <<A
        #1      "Provide repo"
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$1")"

        gt_request get "/v5/repos/${owner_repo}/collaborators"
        ;;
    add)
        # gt_repo_member_add pull:edwinjhlee,work,adf push:work,adf admin:edwinjhlee
        param_example \
            "Add user with pull permission" \
            "gt_repo_member_add --repo=x-bash/work --permission pull user1 user2"
        "Add user with push permission" \
            "gt_repo_member_add --repo=x-bash/work --permission push user3" \
            "Add user with push permission" \
            "gt_repo_member_add --repo=x-bash/work pull:user1,user2 push:user3s"

        param <<A
        --repo="" "Repo name"               =~    [一-龥_a-zA-Z0-9]+
        --permission=pull "Repo permission" = push push admin
        ... "User list"                     =~    [一-龥_a-zA-Z0-9]+
A

        repo="$(gt_param_normalize_repo "$repo")" || return 1

        local username
        for username in "$@"; do
            gt_request put json "/v5/repos/$owner/$repo/collaborators/$username" permission
        done
        ;;
    remove)
        local O="${O:-GITEE_DEFAULT}"

        param <<A
        default gitee_$O
        --repo "Provide repo"
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$repo")" || return 1

        local username
        for username in "$@"; do
            gt_request delete "/v5/repos/$owner_repo/collaborators/$username"
        done
        ;;
    esac
}

############################
# Section 9: Repo Page Managment
############################
# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoPages
gt_repo_page() {
    local op="$1"
    shift
    param <<A
        #1      "Provide repo"      =~    [一-龥_a-zA-Z0-9]+
A
    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$1")"
    case "$op" in
    info)
        gt_request get "/v5/repos/${owner_repo}/pages"
        ;;
    build)
        # Even we could use it
        # {"message":"非付费pages，不允许部署 pages"}
        gt_request post json "/v5/repos/${owner_repo}/pages/builds"
        ;;
    esac
}

### gitee release infomation. Using this to optimize the integration action workflow

############################
# Section 10: Release
############################
# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoReleases
gt_repo_release() {
    local O="${O:-GITEE_DEFAULT}"
    local op="$1"
    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    case "$op" in
    list)
        shift
        param <<A
        #1      "Provide repo"         =~    [a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$1")"
        gt_request get multi "/v5/repos/${owner_repo}/releases"
        ;;
    create)
        shift
        param <<A
        default gitee_$O
        --repo    "Provide repo"                        =~    [a-zA-Z0-9]+
        --tag_name "Please provide tag name"            =~    [一-龥_a-zA-Z0-9]+
        --name    "Release name"                        =~    [一-龥_a-zA-Z0-9]+
        --body    "Release Description"                 =~    [一-龥_a-zA-Z0-9]+
        --prerelease  "Is release version"              =~    [一-龥_a-zA-Z0-9]+
        --target_commitish="master"  "Default is master"    =~    [一-龥_a-zA-Z0-9]+
A

        gt_request post json "/v5/repos/$owner_repo/releases" \
            tag_name name body prerelease target_commitish
        ;;
    update)
        shift
        param <<A
        default gitee_$O=~    [一-龥_a-zA-Z0-9]+
        --tag_name "Please provide tag name"        =~    [一-龥_a-zA-Z0-9]+
        --name    "Release name"                    =~    [一-龥_a-zA-Z0-9]+
        --body    "Release Description"             =~    [一-龥_a-zA-Z0-9]+
        --prerelease  "Is release version"          =~    [一-龥_a-zA-Z0-9]+
        --target_commitish="master"  "Default is master"        =~    [一-龥_a-zA-Z0-9]+
A

        gt_request post json "/v5/repos/$owner_repo/releases/${id}" \
            tag_name name body prerelease target_commitish
        ;;
    get_latest)
        shift
        param <<A
        default gitee_$O
        --repo "Provide repo"
A
        gt_request get "/v5/repos/$owner_repo/releases/latest"
        ;;
    get_or_create)
        shift
        param <<A
        default gitee_$O
        --repo "Provide repo"                       =~    [a-zA-Z0-9]+
        --tag_name "Please provide tag name"        =~    [一-龥_a-zA-Z0-9]+
        --name    "Release name"                    =~    [一-龥_a-zA-Z0-9]+
        --body    "Release Description"             =~    [一-龥_a-zA-Z0-9]+
        --prerelease=false  "Is release version" = true false   =~    [一-龥_a-zA-Z0-9]+
        --target_commitish="master"  "Default is master"        =~    [一-龥_a-zA-Z0-9]+
A
        if [ -z "$(gt_repo_releaseid --repo "$owner_repo" --tag "$tag_name")" ]; then
            gt_repo_release_create --repo "$repo" --tag_name "$tag_name" --name "name" \
                --body "$body" --prerelease "$prerelease" --target_commitish "$target_commitish"
        else
            echo "Already exists $tag_name"
            return 0
        fi
        ;;
    delete)
        shift
        param <<A
        default gitee_$O
        --repo "Provide repo"       =~    [a-zA-Z0-9]+
        --id  "Release ID"          =~    [a-zA-Z0-9]+
A
        gt_request delete "/v5/repos/$owner_repo/releases/$id"
        ;;
    *)
        param <<A
        --default gitee_$O
        --repo "Provide repo"           =~    [a-zA-Z0-9]+
        --tag "Please provide tag"      =~    [a-zA-Z0-9]+
        --choice=id "What you need id or name" = id name assets
A

        gt_request get "/v5/repos/$owner_repo/releases/tags/$tag" | json_query .$choice
        ;;
    esac
}

# TODO
gt_repo_release_attachment() {
    local O="${O:-GITEE_DEFAULT}"
    case "$1" in
    list)
        shift
        param <<A
        default gitee_$O
        --repo    "Repo name"       =~    [a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
        ;;
    upload)
        shift
        local O="${O:-GITEE_DEFAULT}"

        param <<A
        default gitee_$O
        --repo    "Repo name"       =~    [a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
        ;;
    remove)
        shift
        local O="${O:-GITEE_DEFAULT}"

        param <<A
        default gitee_$O
        --repo="" "Repo name"       =~    [a-zA-Z0-9]+
A

        local owner_repo
        owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
        ;;
    *)
        param <<A
        default gitee_$O
        --owner="" "Repo Owner"     =~    [一-龥_a-zA-Z0-9]+
        --repo="" "Repo name"       =~    [a-zA-Z0-9]+
A
        gt_parse_owner_repo
        ;;
    esac
}

############################
# Section 10: Pull Request
############################
### Pull Request Facility. It should fit it the pull request workflow.
# https://gitee.com/api/v5/swagger#/postV5ReposOwnerRepoPulls
gt_repo_pr() {
    local O="${O:-GITEE_DEFAULT}"
    local op="$1"
    shift
    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    case "$op" in
    create)
        param <<A
        default gitee_$O
        --repo    "Repo name"       =~    [a-zA-Z0-9]+
        --title   "pr title"        =~    [a-zA-Z0-9]+
        --head    "source branch. Format: [username:]<branch>"      =~    [一-龥_a-zA-Z0-9]+
        --base    "target branch. Format: [username:]<branch>"      =~    [一-龥_a-zA-Z0-9]+
        --body="" "pull request content"      =~    [一-龥_a-zA-Z0-9]+
        --milestone_number="" "milestone id"      =~    [a-zA-Z0-9]+
        --labels="" "labels"      =~    [a-zA-Z0-9]+
        --issue="" "issue id"      =~    [a-zA-Z0-9]+
        --assignees="" "reviewer username list. Format: <username>[,<username>]"      =~    [一-龥_a-zA-Z0-9]+
        --testers="" "tester username list. Format: <username>[,<username>]"      =~    [一-龥_a-zA-Z0-9]+
        --prune_source_branch=false = true false      =~    [一-龥_a-zA-Z0-9]+
A

        gt_request post json "/v5/repos/$owner_repo/pulls" \
            title head base body \
            milestone_number labels issue assignees testers prune_source_branch
        ;;
    list)
        param <<A
        default gitee_$O
        --repo    "Repo name"      =~    [a-zA-Z0-9]+
        --state=open "" = open closed merged all
        --head=""    "source branch. Format: [username:]<branch>"      =~    [一-龥_a-zA-Z0-9]+
        --base=""    "target branch. Format: [username:]<branch>"      =~    [一-龥_a-zA-Z0-9]+
        --sort=created = created updated popularity long-running      =~    [一-龥_a-zA-Z0-9]+
        --direction=desc    ""   = desc asc
        --milestone_number="" "milestone id"          =~    [a-zA-Z0-9]+
        --labels="" "labels"      =~    [a-zA-Z0-9]+
        --parameter="html_url" "screen parameter"      =~    [一-龥_a-zA-Z0-9]+
A

        gt_request get multi "/v5/repos/${owner_repo}/pulls" state head base \
            sort direction milestone_number labels | json_query ".$parameter"
        ;;
    open)
        param <<A
        default gitee_$O
        --repo="" "Repo name"      =~    [a-zA-Z0-9]+
A
        ;;
    status)
        param <<A
        default gitee_$O
        --repo="" "Repo name"      =~    [a-zA-Z0-9]+
        --parameter="state" ""      =~    [a-zA-Z0-9]+
A
        local state url
        url="$(gt_repo_pr list --repo $repo --parameter "html_url")"
        state="$(gt_repo_pr list --repo $repo --parameter $parameter)"
        echo $id $state
        ;;
    esac

}

# https://gitee.com/api/v5/swagger#/postV5ReposOwnerRepoPullsNumberAssignees
gt_repo_pr_assign() {

    local O="${O:-GITEE_DEFAULT}"
    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    case "$1" in
    delete)
        shift
        param <<A
        default gitee_$O
        --repo    "Repo name"
        --number  "pull request id"
        --assignees "reviewer username list. Format: <username>[,<username>]"
A
        gt_request delete "/v5/repos/$owner_repo/pulls/$number/assignees?assignees=$assignees"
        ;;
    *)
        param <<A
        default gitee_$O
        --repo    "Repo name"
        --number  "pull request id"
        --labels=""
        --assignees "reviewer username list. Format: <username>[,<username>]"
A
        gt_parse_owner_repo
        gt_request post json "/v5/repos/${owner_repo}/pulls/${number}/assignees" "$assignees"
        ;;
    esac

}

# https://gitee.com/api/v5/swagger#/postV5ReposOwnerRepoPullsNumberTesters
gt_repo_pr_testers() {
    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    case $1 in
    delete)
        shift
        param <<A
        default gitee_$O
        --repo "Repo name"      =~    [a-zA-Z0-9]+
        --number "pull request id"      =~    [a-zA-Z0-9]+
        --testers "testers username list. Format: <username>[,<username>]"      =~    [a-zA-Z0-9]+
A
        gt_request delete "/v5/repos/${owner_repo}/pulls/${number}/testers?testers=$testers"
        ;;
    *)
        param <<A
        default gitee_$O
        --repo "Repo name"      =~    [a-zA-Z0-9]+
        --number "pull request id"      =~    [a-zA-Z0-9]+
        --testers="" "testers username list. Format: <username>[,<username>]"      =~    [a-zA-Z0-9]+
A
        gt_request post json "/v5/repos/${repo}/pulls/${number}/testers" labels testers
        ;;
    esac
}

# https://gitee.com/api/v5/swagger#/patchV5ReposOwnerRepoPullsNumberAssignees
gt_repo_pr_review_status_reset() {
    local O="${O:-GITEE_DEFAULT}"

    param <<A
        default gitee_$O
        --repo    "Repo name"                       =~    [a-zA-Z0-9]+
        --number  "pull request id"                 =~    [a-zA-Z0-9]+
        --reset_all=true "Reset" = true false       =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    gt_patch_json "/v5/repos/$owner_repo/pulls/$number/assignees" reset_all
}

# https://gitee.com/api/v5/swagger#/patchV5ReposOwnerRepoPullsNumberTesters
gt_repo_pr_test_status_reset() {

    local O="${O:-GITEE_DEFAULT}"

    param <<A
        default gitee_$O
        --repo    "Repo name"                       =~    [a-zA-Z0-9]+
        --number  "pull request id"                 =~    [a-zA-Z0-9]+
        --reset_all=true "Reset" = true false       =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    gt_patch_json "/v5/repos/$owner_repo/pulls/$number/testers" reset_all
}

# open navigator, using the viewer
# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoPullsNumber
# TODO
gt_repo_pr_view() {

    param <<A
        default gitee_$O
        --repo    "Repo name"        =~    [a-zA-Z0-9]+
        --id  "pull request id"      =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1

    http_browse "https://gitee.com/${owner_repo}/pulls/${id}"
}

gt_repo_pr_checkout_http() {
    param <<A
        default gitee_$O
        --repo    "Repo name"      =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
}

# TODO: repo_url
# git clone to local disk to compare
gt_repo_pr_merge_http() {
    local source_branch="${1:?Provide source branch}"
    local target_branch="${1:?Provide target branch}"

    local repo_name="${repo_url##*/}"
    repo_name=${repo_name%.git}

    if ! git branch; then
        git clone "$repo_url"
        cd repo_name || return 1
    fi

    git checkout "$target_branch"
    git pull "$repo_url" "$source_branch"
    echo "Please open the current folder to merge the code" >&2
    # git push origin issue_I1N19D_ljh_using-java-10
}

# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoPullsNumberIssues
gt_repo_pr_issue_list() {
    param <<A
        default gitee_$O
        --repo      "Repo name"      =~    [a-zA-Z0-9]+
        --number    "pr number"      =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    gt_request get multi "/v5/repos/$owner_repo/pulls/$number/issues"
}

# https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoPullsNumberComments
gt_repo_pr_comment_list() {
    : TODO: assitance
    : list all of the comment in the terminal

    param <<A
        default gitee_$O
        --repo          "Repo name"      =~    [a-zA-Z0-9]+
        --sort=created              = created update
        --direction=desc            = desc asc
        --since=""      "start time ISO 8601"      =~    [a-zA-Z0-9]+
A

    local owner_repo
    owner_repo="$(gt_param_normalize_repo "$repo")" || return 1
    gt_request get multi "/v5/repos/$owner_repo/pulls/comments" sort direction since | json_extract \* "body"
}

############################
# Section 10: OO Style
############################
gt_new() {
    oo.create_new_function gt "$@"
}
############################
# Section 11: Instantiation
############################
gt_make() {
    local O_ORIGINAL=${1:?Provide client name by O environment}

    # if [ -n "$GITEE_DEFAULT" ] && [ "$O_ORIGINAL" = "GITEE_DEFAULT" ]; then
    #     echo "Name 'GITEE_DEFAULT' is reserved for internal use."
    #     return 1
    # fi

    local O="_x_cmd_x_bash_gitee_$O_ORIGINAL"
    http_make "$O" 'https://gitee.com/api'
    O="$O_ORIGINAL" http_header content_type "application/json;charset=utf-8"
    O="$O_ORIGINAL" gt_config load
    O="$O_ORIGINAL" gt_current owner >/dev/null
    # local TOKEN=${2:-""}
    # if [ -n "$GITEE_TOKEN" ]; then
    #     printf "Init token with env GITEE_TOKEN\n" >&2
    #     O=$O_ORIGINAL gt_token.set "$GITEE_TOKEN"
    # else    #     gt_config_load default
    # fi
}

if [ -z "$DO_NOT_INIT_GITEE_DEFAULT" ]; then
    gt_make "GITEE_DEFAULT"
fi
